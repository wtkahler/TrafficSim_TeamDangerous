import tkinter as tk
from tkinter import messagebox
from tkinter.ttk import Progressbar

class StartUI:
    simSize = 10000
    simCancel = False
    
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Traffic Sim")
        
        
        width = self.window.winfo_screenwidth()
        height = self.window.winfo_screenheight()
        
        winH = int(height*3/5)
        winW = int(width/3)
        size = "%dx%d" % (winW, winH)
        self.window.geometry(size)
        
        
        frame = tk.Frame(self.window, bg="", height = winH, width = winW*4/5)
        frame.pack()
        frame.columnconfigure(6)
        frame.rowconfigure(8)
        
        bRun = tk.Button(frame, text = "Run", command = self.run)
        bRun.grid(column = 2, row = 2)
        bUpdate = tk.Button(frame, text = 'Update', command = self.update)
        bUpdate.grid(column= 6, row = 7)
        
        bQuit = tk.Button(frame, text = 'Quit', command = self.quit)
        bQuit.grid(column = 6, row = 8)
        self.window.mainloop()
        return None
        
    def run(self):
        self.simCancel = False
        values = []
        self.progWin = tk.Tk()
        self.progWin.title("Simulation Run")
        
        style = tk.ttk.Style()
        style.theme_use('default')
        style.configure("black.Horizontal.TProgressbar", background='black')
        bar = Progressbar(self.progWin, length = self.window.winfo_screenwidth()/5, style = 'black.Horizontal.TProgressbar')  
        bar.grid(column = 0, columnspan = 4)
        
        bCancel = tk.Button(self.progWin, text = 'Cancel', command = self.cancel)
        bCancel.grid(column = 2, row = 2)
        bAnalyse = tk.Button(self.progWin, text = 'Analyse', command = lambda: self.analyse(values))
        bAnalyse['state'] = 'disable'
        bAnalyse.grid(column = 1, row = 2)
        
        self.progWin.update()
        for i in range(self.simSize):
            values.append(0)
            bar['value'] = i/self.simSize*100 
            self.progWin.update()
            if(self.simCancel):
                self.progWin.destroy()
                messagebox.showwarning('Sim Canceled', 'Simulation has been interrupted.')
                return
                
            
        bCancel['state'] = 'disable'
        bAnalyse['state'] = 'normal'
        
    def cancel(self):
        self.simCancel = messagebox.askyesno('Cancel Sim','Do you want to cancel the sim?')
        
    def analyse(self, values):
        self.progWin.destroy()
        print(values)
        
    def update(self):
        messagebox.showwarning('Update Sim', 'Simulation has been updated.')
        
    def quit(self):
        quit = messagebox.askokcancel('Quit','Quitting simulation.')
        if(quit):
            self.window.destroy()
            self.window.quit()
        else: return
        
        
app = StartUI()
